// <auto-generated />
using System;
using DatingSite.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatingSite.Migrations
{
    [DbContext(typeof(DatingContext))]
    [Migration("20240620080942_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DatingSite.Models.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<DateOnly>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zipcode")
                        .HasColumnType("int");

                    b.HasKey("AccountId");

                    b.HasIndex("Zipcode");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            AccountId = 1,
                            Birthdate = new DateOnly(1967, 7, 26),
                            CreatedDate = new DateOnly(1, 1, 1),
                            Email = "pwe@tec.dk",
                            Firstname = "Palle",
                            IsDeleted = false,
                            Lastname = "Westermann",
                            Password = "a2",
                            Username = "a1",
                            Zipcode = 2700
                        },
                        new
                        {
                            AccountId = 2,
                            Birthdate = new DateOnly(2004, 7, 30),
                            CreatedDate = new DateOnly(1, 1, 1),
                            Email = "Nikam@Outlook.com",
                            Firstname = "Nie",
                            IsDeleted = false,
                            Lastname = "Finkam",
                            Password = "ni",
                            Username = "panini",
                            Zipcode = 4293
                        },
                        new
                        {
                            AccountId = 3,
                            Birthdate = new DateOnly(2000, 1, 1),
                            CreatedDate = new DateOnly(1, 1, 1),
                            Email = "Wizmaster@gmail.com",
                            Firstname = "Albus",
                            IsDeleted = true,
                            Lastname = "Dumbledore",
                            Password = "Wizard",
                            Username = "Al",
                            Zipcode = 2791
                        },
                        new
                        {
                            AccountId = 4,
                            Birthdate = new DateOnly(1932, 10, 18),
                            CreatedDate = new DateOnly(1, 1, 1),
                            Email = "VicTec@hotmail.dk",
                            Firstname = "Victor",
                            IsDeleted = true,
                            Lastname = "Stone",
                            Password = "Titan",
                            Username = "Cyborg",
                            Zipcode = 2000
                        });
                });

            modelBuilder.Entity("DatingSite.Models.City", b =>
                {
                    b.Property<int>("Zipcode")
                        .HasColumnType("int");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Zipcode");

                    b.ToTable("Cities");

                    b.HasData(
                        new
                        {
                            Zipcode = 2000,
                            CityName = "Frederiksberg"
                        },
                        new
                        {
                            Zipcode = 2625,
                            CityName = "Vallensbæk"
                        },
                        new
                        {
                            Zipcode = 2650,
                            CityName = "Hvidovre"
                        },
                        new
                        {
                            Zipcode = 2700,
                            CityName = "Brønshøj"
                        },
                        new
                        {
                            Zipcode = 2730,
                            CityName = "Herlev"
                        },
                        new
                        {
                            Zipcode = 2740,
                            CityName = "Skovlunde"
                        },
                        new
                        {
                            Zipcode = 2791,
                            CityName = "Dragør"
                        },
                        new
                        {
                            Zipcode = 2860,
                            CityName = "Søborg"
                        },
                        new
                        {
                            Zipcode = 2980,
                            CityName = "Kokkedal"
                        },
                        new
                        {
                            Zipcode = 4293,
                            CityName = "Dianalund"
                        });
                });

            modelBuilder.Entity("DatingSite.Models.Like", b =>
                {
                    b.Property<int>("SenderId")
                        .HasColumnType("int");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("int");

                    b.Property<int>("LikeId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("SenderId", "ReceiverId");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("DatingSite.Models.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .HasColumnType("int");

                    b.Property<DateOnly>("Birthdate")
                        .HasColumnType("date");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("ProfileId");

                    b.ToTable("profiles");

                    b.HasData(
                        new
                        {
                            ProfileId = 1,
                            Birthdate = new DateOnly(1967, 7, 26),
                            Gender = 0,
                            Height = 162,
                            IsDeleted = false,
                            Nickname = "Android 13",
                            Weight = 0
                        },
                        new
                        {
                            ProfileId = 2,
                            Birthdate = new DateOnly(2004, 7, 30),
                            Gender = 1,
                            Height = 80,
                            IsDeleted = false,
                            Nickname = "Nicki",
                            Weight = 20
                        },
                        new
                        {
                            ProfileId = 3,
                            Birthdate = new DateOnly(2000, 1, 1),
                            Gender = 0,
                            Height = 0,
                            IsDeleted = true,
                            Nickname = "GrandMaster",
                            Weight = 0
                        },
                        new
                        {
                            ProfileId = 4,
                            Birthdate = new DateOnly(1932, 10, 18),
                            Gender = 0,
                            Height = 212,
                            IsDeleted = true,
                            Nickname = "Booyah",
                            Weight = 194
                        });
                });

            modelBuilder.Entity("DatingSite.Models.Account", b =>
                {
                    b.HasOne("DatingSite.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("Zipcode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DatingSite.Models.Like", b =>
                {
                    b.HasOne("DatingSite.Models.Profile", "Receiver")
                        .WithMany("ReceivedLikes")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DatingSite.Models.Account", "Sender")
                        .WithMany("SentLikes")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DatingSite.Models.Profile", b =>
                {
                    b.HasOne("DatingSite.Models.Account", "Account")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("DatingSite.Models.Account", b =>
                {
                    b.Navigation("SentLikes");
                });

            modelBuilder.Entity("DatingSite.Models.Profile", b =>
                {
                    b.Navigation("ReceivedLikes");
                });
#pragma warning restore 612, 618
        }
    }
}
